% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_generation.R
\name{data_generation}
\alias{data_generation}
\title{Simulate MAP data set:}
\usage{
data_generation(G = 100, n_control = 10, n_treat = 10, n_rep = 3,
  k_real = 4, sigma2_r = rep(1, 2), sigma1_2_r = 1,
  sigma2_2_r = c(3, 2), mu1_r = 4, phi_g_r = rep(1, 100),
  p_k_real = c(0.7, 0.1, 0.1, 0.1), x = x)
}
\arguments{
\item{G}{Number of genes to simulate}

\item{n_control}{Number of time points in control group}

\item{n_treat}{Number of time points in treatment group}

\item{n_rep}{Number of replicates in both group}

\item{k_real}{Always be 4}

\item{sigma2_r}{Variance parameter for \eqn{\tau_{g}}}

\item{sigma1_2_r}{Variance parameter for \eqn{\eta_{g1}}}

\item{sigma2_2_r}{Variance parameter for \eqn{\eta_{g2}}}

\item{mu1_r}{Mean parameter for \eqn{\eta_{g1}}}

\item{phi_g_r}{Dispersion parameter}

\item{p_k_real}{True proportion for each mixture component}

\item{x}{Time structured design for the simulated data}
}
\value{
\itemize{
\item Y1 Simulated data
}
}
\description{
Simulate MAP data set:
}
\details{
The vector of read counts for gene g, treatment group i, replicate j,
at time point \eqn{t,Y_{gij}(t)}, follows a Negative Binomial distribution
parameterized mean \eqn{\lambda_{gi}} and \eqn{\phi_g}, where
\eqn{E[Y_{gij}(t)] = \lambda_{gi}(t)}.
\eqn{\lambda_{gi}(t)} is further modeled as
\eqn{\lambda_{gi}(t) = S_{ij} \exp[\eta_{g1}I_{i = 2} + B'(t)\eta_{g2}I_{i = 2} + B'(t)\tau_{g}]}.
We have \eqn{B'(t)} are design matrix, which is constructed by 2 orthorgonal polynomial bases.
\itemize{
\item t = 1,..., n_treat (or n_control if control group);
\item j = 1,..., n_rep;
\item g = 1,...,G; and
\item \eqn{[\eta_{g1}, \eta_{g2}, \tau_{g}]} ~ 4-component gausssian mixture model
}
}
\examples{
library(matlib)
n_basis = 2
n_control = 10
n_treat   = 10
n_rep = 3
tt_treat  = c(1:n_treat)/n_treat
nt = length(tt_treat)
ind_t = sort(sample(c(1:nt), n_control))
tt = tt_treat[ind_t]
tttt = c(rep(tt, n_rep), rep(tt_treat, n_rep))
z = x = matrix(0, length(tttt), n_basis)
z[,1] = 1.224745*tttt
z[,2] = -0.7905694 + 2.371708*tttt^2
x[,1] = z[,1] - Proj(z[,1], rep(1, length(tttt)))
x[,2] = z[,2] - Proj(z[,2], rep(1, length(tttt))) - Proj(z[,2], x[,1])
Y1 = data_generation(G = 100,
                     n_control = n_control,
                     n_treat   = n_treat,
                     n_rep     = n_rep,
                     k_real = 4,
                     sigma2_r = rep(1, 2),
                     sigma1_2_r = 1,
                     sigma2_2_r = c(3,2),
                     mu1_r = 4,
                     phi_g_r = rep(1, 100),
                     p_k_real = c(0.7, 0.1, 0.1, 0.1),
                     x = x)
}
